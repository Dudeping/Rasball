public static void TarCreateFromStream()
{

// 创建输出流。不必是磁盘，可以是内存流等。
string tarOutFn = @"d:\test.tar";
Stream outStream = File.Create(tarOutFn);
TarOutputStream tarOutputStream = new TarOutputStream(outStream);

CreateTarArchive(tarOutputStream, @"D:\文件夹");

// 关闭归档文件也关闭底层流。
tarOutputStream.Close();
}

private static void CreateTarArchive(TarOutputStream tarOutputStream, string sourceDirectory)
{
// 可选地，为目录本身写一个条目。
// TarEntry tarEntry = TarEntry.CreateEntryFromFile(sourceDirectory);
// tarOutputStream.PutNextEntry(tarEntry);
// 将每个文件写入tar。
string[] filenames = Directory.GetFiles(sourceDirectory);

foreach (string filename in filenames)
{
using (Stream inputStream = File.OpenRead(filename))
{
int idxStart = filename.LastIndexOf('\\') + 1;
string tarName = filename.Substring(idxStart, filename.Length - idxStart);
long fileSize = inputStream.Length;
TarEntry entry = TarEntry.CreateTarEntry(tarName);

// 必须设置大小，否则当输出超过时，TAROutPutsFipe将失败。
entry.Size = fileSize;

// 在写入数据之前，将条目添加到TAR流中。
tarOutputStream.PutNextEntry(entry);

// 这是从TracSovi.Read EngyCype复制的
byte[] localBuffer = new byte[32 * 1024];
while (true)
{
int numRead = inputStream.Read(localBuffer, 0, localBuffer.Length);
if (numRead <= 0)
{
break;
}
tarOutputStream.Write(localBuffer, 0, numRead);
}
}
tarOutputStream.CloseEntry();
}
// 递归。如果不需要就删除。
//string[] directories = Directory.GetDirectories(sourceDirectory);
//foreach (string directory in directories)
//{
// CreateTarArchive(tarOutputStream, directory);
//}
}







Docker 新框架规划 90%

1. 完成树节点拆分，保持各节点职责单一；
2. 完成树右键菜单命令调整，使用新框架特性；
3. 调整模块、组件、命令、树节点之间的关系；
4. 初步定义 docker-compose 接口(未完成)。

这周主要都是在做 Docker 新框架的迁移规划，因为上周 Docker 在迁入新框架时没有进行整体的规划；
贺辉迁移并调整完的代码，一开始看起来似乎符合新框架的要求，但是仔细检查发现，很多地方还是受老框架和 Demo 阶段的影响；
代码不是一下子就写烂了的，一开始看起来都没有啥问题，然后慢慢往上面加，直到一天出现了一些莫名其妙的大问题时，发现怎么也改不了；
所以需要从一开始就要有良好的设计规划，结构简洁清晰，易扩展易维护，并且在开发过程中需要一直遵守一开始制定的原则，并保证代码逻辑严密。

docker-compose 相关功能规划
新框架向导模块
