public static void TarCreateFromStream()
{

// 创建输出流。不必是磁盘，可以是内存流等。
string tarOutFn = @"d:\test.tar";
Stream outStream = File.Create(tarOutFn);
TarOutputStream tarOutputStream = new TarOutputStream(outStream);

CreateTarArchive(tarOutputStream, @"D:\文件夹");

// 关闭归档文件也关闭底层流。
tarOutputStream.Close();
}

private static void CreateTarArchive(TarOutputStream tarOutputStream, string sourceDirectory)
{
// 可选地，为目录本身写一个条目。
// TarEntry tarEntry = TarEntry.CreateEntryFromFile(sourceDirectory);
// tarOutputStream.PutNextEntry(tarEntry);
// 将每个文件写入tar。
string[] filenames = Directory.GetFiles(sourceDirectory);

foreach (string filename in filenames)
{
using (Stream inputStream = File.OpenRead(filename))
{
int idxStart = filename.LastIndexOf('\\') + 1;
string tarName = filename.Substring(idxStart, filename.Length - idxStart);
long fileSize = inputStream.Length;
TarEntry entry = TarEntry.CreateTarEntry(tarName);

// 必须设置大小，否则当输出超过时，TAROutPutsFipe将失败。
entry.Size = fileSize;

// 在写入数据之前，将条目添加到TAR流中。
tarOutputStream.PutNextEntry(entry);

// 这是从TracSovi.Read EngyCype复制的
byte[] localBuffer = new byte[32 * 1024];
while (true)
{
int numRead = inputStream.Read(localBuffer, 0, localBuffer.Length);
if (numRead <= 0)
{
break;
}
tarOutputStream.Write(localBuffer, 0, numRead);
}
}
tarOutputStream.CloseEntry();
}
// 递归。如果不需要就删除。
//string[] directories = Directory.GetDirectories(sourceDirectory);
//foreach (string directory in directories)
//{
// CreateTarArchive(tarOutputStream, directory);
//}
}


周
本周主要是处理 Solution 和向导，Solution 完善了 Entry 上的数据，然后对向导做了重构；

现在向导的界面实现以及处理流程上包含了大量冗余的逻辑，以及运用了一些不合适的技术(比如大量使用转换器导致逻辑不清晰)，
本次重构通过重新梳理接口和界面流程，精简了大量的冗余代码，并规范命名和整理目录结构，最终的结果是以较少的代码实现了功能；

最近两个月因为新同事的加入，改变了我们以前开会时比较闷的情况，同时也借此机会，打造我们团队一种更加开放、积极的讨论氛围。

年
自评：当前处于自知的状态，正在积极做出改变，积极主动表达自己的不同意见并采纳改进建议，同时提升执行力以寻求突破；
今年最大的进步是在更加深入学习 .NET 的同时也更加广泛地学习其他技术(WPF、前端框架、Golang)，让自己可以从更开阔的角度看待一些问题，降低禀赋效应的影响；
同时，通过一年的摸索，以及领导的指导，在团队管理上面找到了一些门路，可以自主处理团队日常事务，任务规划和进度跟进，但是在团队人才培养上还非常欠缺。
