public static void TarCreateFromStream()
{

// 创建输出流。不必是磁盘，可以是内存流等。
string tarOutFn = @"d:\test.tar";
Stream outStream = File.Create(tarOutFn);
TarOutputStream tarOutputStream = new TarOutputStream(outStream);

CreateTarArchive(tarOutputStream, @"D:\文件夹");

// 关闭归档文件也关闭底层流。
tarOutputStream.Close();
}

private static void CreateTarArchive(TarOutputStream tarOutputStream, string sourceDirectory)
{
// 可选地，为目录本身写一个条目。
// TarEntry tarEntry = TarEntry.CreateEntryFromFile(sourceDirectory);
// tarOutputStream.PutNextEntry(tarEntry);
// 将每个文件写入tar。
string[] filenames = Directory.GetFiles(sourceDirectory);

foreach (string filename in filenames)
{
using (Stream inputStream = File.OpenRead(filename))
{
int idxStart = filename.LastIndexOf('\\') + 1;
string tarName = filename.Substring(idxStart, filename.Length - idxStart);
long fileSize = inputStream.Length;
TarEntry entry = TarEntry.CreateTarEntry(tarName);

// 必须设置大小，否则当输出超过时，TAROutPutsFipe将失败。
entry.Size = fileSize;

// 在写入数据之前，将条目添加到TAR流中。
tarOutputStream.PutNextEntry(entry);

// 这是从TracSovi.Read EngyCype复制的
byte[] localBuffer = new byte[32 * 1024];
while (true)
{
int numRead = inputStream.Read(localBuffer, 0, localBuffer.Length);
if (numRead <= 0)
{
break;
}
tarOutputStream.Write(localBuffer, 0, numRead);
}
}
tarOutputStream.CloseEntry();
}
// 递归。如果不需要就删除。
//string[] directories = Directory.GetDirectories(sourceDirectory);
//foreach (string directory in directories)
//{
// CreateTarArchive(tarOutputStream, directory);
//}
}



PowerServer License 服务开发
* 完成接口合并：将所有请求合并成一个接口；
* 完成启动请求接口独立；
* 整理简化接口处理逻辑；
* 初步完成缓存添加。

Web 技术选型
* 确定后台网站开发方式：直接使用 ASP.NET Core Pages；
* 确定认证授权服务器选型：基于 IdentityServer4 开发。

其他
* 完成 Docker 禅道问题整理分析；
* 完成 Docker 整理流程验证/体验；
* 完成 Docker 新增 Message 确认；
* 完成 RaipedSharp 遗漏的 BUG 修复合并。

本周主要在处理 License 服务开发、Web 技术选型以及一些发布事项；License 服务重新整理了接口，并且增加了缓存，以减少数据库压力；
本着简单方便维护的原则，最后确定后台网站使用原生 ASP.NET Core 开发，不基于其他框架，授权服务器基于 Ids4 自己开发，后面可以独立成产品；
接近版本发布，我们梳理并修复了 Docker 禅道上重要的 BUG，然后完成了一轮整理流程的验证/体验，并整理了需要修复和进一步优化的列表；
因为团队合作的关系，保障 R3 Beta 版顺利发布，下周我们组除了重要 BUG 修复外会全部投入到 SD 之前已有功能的使用体验和问题定位上。

本月主要时间都在处理 License 服务的开发工作，
需求调整后，没有及时调整开发的重点，导致了大量冗余的数据和复杂的业务逻辑，同时没有分析好多数/少数场景，导致了大量无用的统计计算；

在本月的团队开发过程中，明确体会到了用正确的方法做正确的事的重要性；
同样的一个任务，同样的方案，有的组员就会严格按照讨论的方案，虽然一开始会慢一点，但是整个的逻辑会越做越清晰，
但是有的组员实现时喜欢走捷径，追求快速实现功能，但是通常是没有时间再回过头来优化的，最后会越做越乱，后续需要着重纠正这种做事方式。

